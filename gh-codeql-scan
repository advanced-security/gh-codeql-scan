#!/bin/bash
set -eu

export EXTENSION_LOCATION="$(CDPATH= cd -- "$(dirname -- "$0")" && pwd)"

source $EXTENSION_LOCATION/bin/codeql-utils

# >> CodeQL Scan
export CODEQL_SCAN_VERSION="0.6.2"
# enabled by default
export CODEQL_SCAN_BANNER=1

# >> CodeQL
export CODEQL_DATABASES="${CODEQL_DATABASES:=$HOME/.codeql/databases}"
# Override the database if it exists
export CODEQL_DATABASES_OVERRIDE=1
export CODEQL_RESULTS="${CODEQL_RESULTS:=$HOME/.codeql/results}"
export CODEQL_BINARY="${CODEQL_BINARY:=gh codeql}"
# `code-scanning` (default), `security-extended`, or `security-and-quality`
export CODEQL_SUITE="${CODEQL_SUITE:=}"
# Tracing is disabled by default
export CODEQL_TRACING=0
export CODEQL_LANGUAGES=
# this variable is used to know while databases need to be analyzed
export CODEQL_DATABASE_PATHS_FILE="${CODEQL_DATABASE_PATHS_FILE:=/tmp/codeql-database-paths.txt}"

export WORKSPACE="${WORKSPACE:=$PWD}"

# >> GitHub
export GITHUB_INSTANCE=${GITHUB_INSTANCE:="https://github.com"}
# upload by default
export GITHUB_UPLOAD=${GITHUB_UPLOAD:=1}
# auto-detect languages
export GITHUB_AUTO_DETECT=${GITHUB_AUTO_DETECT:=1}

# Git Based metadata
export GIT_HASH=$(git rev-parse HEAD)
# Assumes that this is scanning a branch, not a Pull Request
#   https://docs.github.com/en/code-security/secure-coding/configuring-codeql-code-scanning-in-your-ci-system#scanning-pull-requests
export GIT_REF="refs/heads/$(git branch --show-current)"


# default: scan
MODE="scan"
if [ -z ${1+x} ]; then
    debug "Using default mode"
elif [[ "${1}" = "--help" ]]; then
    codeql-scan-help
    exit 0
elif [[ "${1}" =~ ^(init|analyze|scan|upload) ]]; then
    MODE="$1"
    debug "Using mode :: $MODE"
    shift
fi

# parse other arguments
for i in "$@"; do
  case $i in
    --debug)
        export DEBUG=1
        shift
        ;;
    -r=*|--repo=*)
        export GITHUB_REPOSITORY="${i#*=}"
        shift
        ;;
    --auto-detect)
        export GITHUB_AUTO_DETECT=1
        shift
        ;;
    --disable-tracing)
        export CODEQL_TRACING=0
        shift
        ;;
    --disable-upload)
        export GITHUB_UPLOAD=0
        shift
        ;;
    --disable-banner)
        export CODEQL_SCAN_BANNER=0
        shift
        ;;
    -l=*|--language=*)
        export CODEQL_LANGUAGES="${i#*=}"
        shift
        ;;
    -c=*|--command=*)
        export CODEQL_BUILD_COMMAND="${i#*=}"
        export CODEQL_TRACING="1"    # enable tracing
        shift
        ;;
    -d=*|--databases=*)
        export CODEQL_DATABASES="${i#*=}"
        shift
        ;;
    -s=*|--suite=*)
        export CODEQL_SUITE="${i#*=}"
        shift
        ;;
    -b=*|--binary=*|--codeql-bin=*)
        export CODEQL_BINARY="${i#*=}"
        shift
        ;;
    -i=*|--instance=*)
        export GITHUB_INSTANCE="${i#*=}"
        shift
        ;;
    -w=*|--workspace=*)
        export WORKSPACE="${i#*=}"
        shift
        ;;
    --view-in-vscode)
        export CODEQL_VIEW_IN_VSCODE=1
        shift
        ;;
    # -*|--*)
    #     echo "Unknown option $i"
    #     exit 1
    #     ;;
    *)
        ;;
  esac
done


display-banner

debug "Checking CodeQL installation :: $CODEQL_BINARY"
CODEQL_VERSION=$(codeql-version)
debug "CodeQL Original version :: $CODEQL_VERSION"

if [ "$CODEQL_VERSION" = "" ]; then
    warning "CodeQL is not installed, now installing automatically..."

    codeql-install
    # re-export the gh cli codeql extension
    export CODEQL_BINARY="gh codeql"
    export CODEQL_VERSION=$(codeql-version)
fi


info "Using CodeQL version :: $CODEQL_VERSION"

# Output dirs
info "Storing CodeQL databases :: $CODEQL_DATABASES"
if [ ! -d $CODEQL_DATABASES ]; then
    mkdir -p $CODEQL_DATABASES
fi
info "Storing CodeQL results :: $CODEQL_RESULTS"
if [ ! -d $CODEQL_RESULTS ]; then
    mkdir -p $CODEQL_RESULTS
fi


# Auto detect the repository owner and name
if [ -z ${GITHUB_REPOSITORY+x} ]; then
    REMOTE=$(git config --get remote.origin.url)
    if [[ $REMOTE == git@* ]]; then
        debug "Using SSH remote :: $REMOTE"
        # only works for github.com repositories
        export GITHUB_REPOSITORY=$(echo $REMOTE | sed -e 's/.*github.com[:\/]\(.*\)\.git/\1/')
    elif [[ $REMOTE == https://* ]]; then
        debug "Using HTTPS remote :: $REMOTE"
        export GITHUB_REPOSITORY=${REMOTE#*://*/} && export GITHUB_REPOSITORY=${GITHUB_REPOSITORY%.git}
    else
        error "Unable to auto-detect the repository owner and name"
        exit 1
    fi
    info "Using remote repository :: $GITHUB_REPOSITORY"
fi

# Running different modes
if [ $MODE = "init" ]; then
    info "Running Init mode..."

    $EXTENSION_LOCATION/bin/codeql-init $@

elif [ $MODE = "analyze" ]; then
    info "Running Analyze mode..."

    $EXTENSION_LOCATION/bin/codeql-analyze $@

elif [ $MODE = "upload" ]; then
    info "Uploading results to GitHub..."

    $EXTENSION_LOCATION/bin/codeql-upload $@

    info "Find Code Scanning results at: $GITHUB_INSTANCE/$GITHUB_REPOSITORY/security/code-scanning"

elif [ $MODE = "scan" ]; then
    info "Running Scan mode..."

    $EXTENSION_LOCATION/bin/codeql-init $@

    $EXTENSION_LOCATION/bin/codeql-analyze $@

    if [ "$GITHUB_UPLOAD" = "1" ]; then
        info "Uploading results to GitHub..."
        $EXTENSION_LOCATION/bin/codeql-upload $@

        info "Find Code Scanning results at: $GITHUB_INSTANCE/$GITHUB_REPOSITORY/security/code-scanning"
    else
        debug "Results are not uploaded to GitHub"
    fi
fi


if [ "$CODEQL_VIEW_IN_VSCODE" = "1" ]; then
    info "Opening results in VSCode..."
    code -r $(get-sarif-files $CODEQL_DATABASE_PATHS_FILE)
fi

info "Completed CodeQL Scan!"
