#!/bin/bash
set -eu
export EXTENSION_LOCATION="$(CDPATH= cd -- "$(dirname -- "$0")" && pwd)"

source $EXTENSION_LOCATION/bin/codeql-utils

# >> CodeQL
export CODEQL_DATABASES="${CODEQL_DATABASES:=$PWD/.codeql-databases}"
# Override the database if it exists
export CODEQL_DATABASES_OVERRIDE=1
export CODEQL_RESULTS="${CODEQL_RESULTS:=$PWD/.codeql-results}"
export CODEQL_BINARY="${CODEQL_BINARY:=codeql}"
# `code-scanning` (default), `security-extended`, or `security-and-quality`
export CODEQL_SUITE="${CODEQL_SUITE:=code-scanning}"
# Tracing is disabled by default
export CODEQL_TRACING=1
export CODEQL_LANGUAGES=

# >> GitHub
export GITHUB_INSTANCE="https://github.com"
# upload by default
export GITHUB_UPLOAD=1
# do not auto-detect languages 
export GIHTUB_AUTO_DETECT=0

# Git Based metadata
export GIT_HASH=$(git rev-parse HEAD)
# Assumes that this is scanning a branch, not a Pull Request
#   https://docs.github.com/en/code-security/secure-coding/configuring-codeql-code-scanning-in-your-ci-system#scanning-pull-requests
export GIT_REF="refs/heads/$(git branch --show-current)"


codeql-scan-help() {
    cat <<EOF
GitHub CodeQL Scan tool

gh codeql-scan {MODE} {ARGS}

gh codeql-scan              # default: "scan"
gh codeql-scan init         # initialise the scan 
gh codeql-scan analysis     # run the analysis
gh codeql-scan upload       # upload present SARIF files
gh codeql-scan scan         # full end-to-end scan 
EOF
}



# default: scan
MODE="scan"
if [ -z ${1+x} ]; then
    debug "Using default mode"

elif [[ "${1}" = "--help" ]]; then
    codeql-scan-help
    exit 0
elif [[ "${1}" =~ ^(init|analyze|scan|upload) ]]; then
    MODE="$1"
    shift

fi

# parse other arguments
for i in "$@"; do
  case $i in
    --debug)
        export DEBUG=1
        shift
        ;;
    -r=*|--repo=*)
        export GITHUB_REPOSITORY="${i#*=}"
        shift
        ;;
    --auto-detect)
        export GIHTUB_AUTO_DETECT=1
        shift
        ;;
    --disable-tracing)
        export CODEQL_TRACING=0
        shift
        ;;
    --disable-upload)
        export GITHUB_UPLOAD=0
        shift
        ;;
     -l=*|--language=*)
        export CODEQL_LANGUAGES="${i#*=}"
        shift
        ;;
    -c=*|--command=*)
        export CODEQL_BUILD_COMMAND="${i#*=}"
        export CODEQL_TRACING=0    # disable tracing too
        shift
        ;;
     -d=*|--databases=*)
        export CODEQL_DATABASES="${i#*=}"
        shift
        ;;
    -b=*|--binary=*|--codeql-bin=*)
        export CODEQL_BINARY="${i#*=}"
        shift
        ;;
    -i=*|--instance=*)
        export GITHUB_INSTANCE="${i#*=}"
        shift
        ;;
    -*|--*)
        echo "Unknown option $i"
        exit 1
        ;;
    *)
        ;;
  esac
done


# Create dirs CodeQL
mkdir -p $CODEQL_DATABASES
mkdir -p $CODEQL_RESULTS


# If uploading and GitHub repo isn't set
#if [ ${GITHUB_UPLOAD} == 1 ] && [ -z ${GITHUB_REPOSITORY+x} ]; then
#    # TODO: Assumes the remote origin is the upstream repo
#    REMOTE=$(git config --get remote.origin.url)
#fi


if [ $MODE = "init" ]; then
    echo "Running Init mode..."
    
    #$HERE/bin/codeql-config.sh
    $EXTENSION_LOCATION/bin/codeql-init

elif [ $MODE = "analysis" ]; then
    echo "Running Analysis mode..."
    
    $EXTENSION_LOCATION/bin/codeql-analyze

elif [ $MODE = "upload" ]; then
    echo "Uploading results to GitHub..."
    $EXTENSION_LOCATION/bin/codeql-upload

elif [ $MODE = "scan" ]; then
    echo "Running Scan mode..."

    debug "Disable tracing as it can not be used in this mode"
    export CODEQL_TRACING=0
    
    $EXTENSION_LOCATION/bin/codeql-init --auto-detect  
    $EXTENSION_LOCATION/bin/codeql-analyze

    if [ "$GITHUB_UPLOAD" = "1" ]; then
        echo "Uploading results to GitHub..."
        $EXTENSION_LOCATION/bin/codeql-upload
    fi
else
    echo "ERROR: Mode is not supported"
    codeql-scan-help
    exit 1
fi

