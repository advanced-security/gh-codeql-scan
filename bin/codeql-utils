#!/bin/bash

set -e

export QL_LANGUAGES="cpp,csharp,go,java,javascript,python,ruby"

# https://unix.stackexchange.com/questions/9957/how-to-check-if-bash-can-print-colors
if test -t 1; then
    ncolors=$(tput colors)
    if test -n "$ncolors" && test $ncolors -ge 8; then
        bold="$(tput bold)"
        underline="$(tput smul)"
        standout="$(tput smso)"
        normal="$(tput sgr0)"
        black="$(tput setaf 0)"
        red="$(tput setaf 1)"
        green="$(tput setaf 2)"
        yellow="$(tput setaf 3)"
        blue="$(tput setaf 4)"
        magenta="$(tput setaf 5)"
        cyan="$(tput setaf 6)"
        white="$(tput setaf 7)"
    fi
else
    bold=""
    underline=""
    standout=""
    normal=""
    black=""
    red=""
    green=""
    yellow=""
    blue=""
    magenta=""
    cyan=""
    white=""
fi

display-banner() {
    if [ ! -z ${CODEQL_SCAN_BANNER+x} ] && [ "$CODEQL_SCAN_BANNER" = "0" ]; then
        return
    fi
    echo "${green}   _____           _       _____ _       _____"
    echo "  /  __ \         | |     |  _  | |     /  ___|"
    echo "  | /  \/ ___   __| | ___ | | | | |     \ \`--.  ___ __ _ _ __"
    echo "  | |    / _ \ / _\` \|/ _ | | | | |      \`--. \/ __/ _\` | '_ \\"
    echo "  | \__/\ (_) | (_| |  __/\ \/' / |____ /\__/ / (_| (_| | | | |"
    echo "   \____/\___/ \__,_|\___| \_/\_\_____/ \____/ \___\__,_|_| |_|${normal}"
    echo "             v${underline}$CODEQL_SCAN_VERSION${normal} - by ${bold}${red}GitHub Field Security Specialist team${normal}"
    echo ""
}

codeql-scan-help() {
    cat <<EOF
GitHub CodeQL Scan tool

gh codeql-scan {MODE} {ARGS}

# Modes

gh codeql-scan              # default: "scan"
gh codeql-scan init         # initialise the scan 
gh codeql-scan analyze      # run the analysis
gh codeql-scan upload       # upload present SARIF files
gh codeql-scan scan         # full end-to-end scan 

# Arguments

> All arguments can be set with enviroment variables

-h|--help               # Print help
--debug                 # Enable debugging
    
-r=*|--repo=*           # GitHub Respository (OWNER/NAME)
-i=*|--instance=*       # GitHub Instance (github.com or Enterprise Server)

-l=*|--language=*       # Set language to scan
--auto-detect           # Auto-detect languages

-s=*|--suite=*          # Query Suite to use
-d=*|--databases=*      # Location of the databases to store
-b=*|--binary=*         # Path to the CodeQL Binary
-w=*|--workspace=*      # Workspace for the souce code

-c=*|--command=*        # Set the build comment (compiled languages)
-m=*|--mode=*           # Build mode (autobuild | none)
--buildless             # Enable buildless / build mode none

--view-in-vscode        # Auto-open the results in VSCode

--disable-tracing       # Disable Build Tracing
--disable-trap-caching  # Disable Trap file caching
--disable-upload        # Disable Uploading SARIF to GitHub
--disable-banner        # Disable printing banner

EOF
}

# Printing methods for stdout

info() {
    echo "${green}[+]${normal} $@"
}
debug() {
    if [ ! -z ${DEBUG+x} ]; then
        echo "${blue}[#] DEBUG: $@ ${normal}"
    fi
}
warning() {
    echo "${yellow}[!] WARNING: $@ ${normal}"
}
error() {
    echo "${red}[*] ERROR: $@${normal}"
}


# CodeQL methods

codeql-version() {
    # return the version of CodeQL installed
    CODEQL_VERSION=$($CODEQL_BINARY version --format=terse 2>/dev/null)
    echo "$CODEQL_VERSION"
}

codeql-install() {
    # https://github.com/GeekMasher/.dotfiles/blob/d08a1525c624e88b4d686cf70da349616d2b8aa4/codeql/.local/codeql-update
    info "Installing CodeQL via gh-cli..."

    gh extensions install github/gh-codeql
    gh codeql set-version latest

    # install new packs for each language
    for lang in $(echo $QL_LANGUAGES | sed "s/,/ /g"); do
        gh codeql pack download "codeql/$lang-queries"
    done

    info "CodeQL installed!"
}

# Get 80% the memory of the system in MB
memory() {
    MEMORY=0
    # Get the memory of the system
    if [[ "$OSTYPE" == "darwin"* ]]; then
        # MacOS
        MEMORY=$(sysctl -n hw.memsize)
    else
        # Linux
        MEMORY=$(free -m | awk 'NR==2{print $2}')
    fi

    # 80% of the memory
    MEMORY=$(echo "0.8 * $MEMORY" | bc | cut -d'.' -f1)
    echo $MEMORY
}

# Get SARIF files based on database names
get-sarif-files() {
    # return a list of SARIF files based on database names
    DATABASE_PATHS=$(cat $1)
    for CODEQL_DATABASE_PATH in $DATABASE_PATHS; do
        SARIF_FILE="$CODEQL_RESULTS/$(basename $CODEQL_DATABASE_PATH).sarif"
        debug "Possible SARIF file :: $SARIF_FILE"
        if [ -f $SARIF_FILE ]; then
            echo "$SARIF_FILE"
        fi
    done
}
